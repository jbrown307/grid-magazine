/* CSS box-sizing enables you to define how you want the height and width of an element to be 
calculated. It means that you can use this property to specify whether the padding or border of the 
element should be included in the height and width or not. */
*,
::before,
::after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: Baskervville, serif;
  color: linen;
  background-color: rgb(20, 30, 40);
}

h1 {
  font-family: Anton, sans-serif;
}

h2,
h3,
h4,
h5,
h6 {
  font-family: "Raleway", sans-serif;
}

a {
  text-decoration: none;
  color: linen;
}

/* The object-fit property tells the browser how to position the element within its container. In this 
case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect 
ratio */
img {
  width: 100%;
  object-fit: cover;
}
/* CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and 
vertically while still retaining control to do things like overlap elements */

/* The content to have a three-column layout by adding a grid-template-columns property with a value
 of 1fr 94rem 1fr. This will create three columns where the middle column is 94rem wide, and the first 
 and last columns are both 1 fraction of the remaining space in the grid container */

/* The minmax function to make your columns responsive on any device. The minmax function takes 
 two arguments, the first being the minimum value and the second being the maximum. These values 
 could be a length, percentage, fr, or even a keyword like max-content */
main {
  display: grid;
  grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(
      2rem,
      1fr
    );
  row-gap: 3rem;
}

/* Grid-column property, which is shorthand for grid-column-start and grid-column-end. The 
grid-column property tells the grid item which grid line to start and end at. */

/* .heading rule and set the grid-column property to 2 / 3. This will tell the .heading element to start at 
grid line 2 and end at grid line 3 */

/* For additional control over the layout of your content, you can have a CSS Grid within a 
CSS Grid. */

/* The CSS repeat() function is used to repeat a value, rather than writing it out manually, and is 
helpful for grid layouts. For example, setting the grid-template-columns property to repeat(20, 200px)
 would create 20 columns each 200px wide. */
.heading {
  display: grid;
  grid-column: 2/3;
  grid-template-columns: repeat(2, 1fr);
  row-gap: 1.5rem;
}

/* Remember that the grid-column property determines which columns an element starts and ends at. 
There may be times where you are unsure of how many columns your grid will have, but you want an 
element to stop at the last column. To do this, you can use -1 for the end column. */
.hero {
  position: relative;
  grid-column: 1/ -1;
}

.text {
  grid-column: 2/3;
}

.hero-title {
  text-align: center;
  color: orangered;
  font-size: 8rem;
}

.hero-subtitle {
  font-size: 2.4rem;
  color: orangered;
  text-align: center;
}

.author {
  font-size: 2rem;
  font-family: Raleway, sans-serif;
}
.author-name a:hover {
  background-color: #306203;
}

.publish-date {
  color: rgba(255, 255, 255, 0.5);
}

.social-icons {
  display: grid;
  font-size: 3rem;
}
