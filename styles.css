/* CSS box-sizing enables you to define how you want the height and width of an element to be 
calculated. It means that you can use this property to specify whether the padding or border of the 
element should be included in the height and width or not. */
*,
::before,
::after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: Baskervville, serif;
  color: linen;
  background-color: rgb(20, 30, 40);
}

html {
  font-size: 62.5%;
}

body {
  font-family: "Baskervville", serif;
  color: linen;
  background-color: rgb(20, 30, 40);
}

h1 {
  font-family: "Anton", sans-serif;
}

h2,
h3,
h4,
h5,
h6 {
  font-family: "Raleway", sans-serif;
}

a {
  text-decoration: none;
  color: linen;
}

/* The object-fit property tells the browser how to position the element within its container. In this 
case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect 
ratio */
img {
  width: 100%;
  object-fit: cover;
}

/* CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and 
vertically while still retaining control to do things like overlap elements */

/* The content to have a three-column layout by adding a grid-template-columns property with a value
 of 1fr 94rem 1fr. This will create three columns where the middle column is 94rem wide, and the first 
 and last columns are both 1 fraction of the remaining space in the grid container */

/* The minmax function to make your columns responsive on any device. The minmax function takes 
 two arguments, the first being the minimum value and the second being the maximum. These values 
 could be a length, percentage, fr, or even a keyword like max-content */
main {
  display: grid;
  grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(
      2rem,
      1fr
    );
  row-gap: 3rem;
}

hr {
  margin: 1.5rem 0;
  border: 1px solid rgba(120, 120, 120, 0.6);
}

.lists {
  list-style-type: none;
  margin-top: 2rem;
}
.lists li {
  margin-bottom: 1.5rem;
}
.list-title,
.list-subtitle {
  color: #00beef;
}

/* Grid-column property, which is shorthand for grid-column-start and grid-column-end. The 
grid-column property tells the grid item which grid line to start and end at. */

/* .heading rule and set the grid-column property to 2 / 3. This will tell the .heading element to start at 
grid line 2 and end at grid line 3 */

/* For additional control over the layout of your content, you can have a CSS Grid within a 
CSS Grid. */

/* The CSS repeat() function is used to repeat a value, rather than writing it out manually, and is 
helpful for grid layouts. For example, setting the grid-template-columns property to repeat(20, 200px)
 would create 20 columns each 200px wide. */
.heading {
  grid-column: 2 / 3;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  row-gap: 1.5rem;
}

/* Remember that the grid-column property determines which columns an element starts and ends at. 
There may be times where you are unsure of how many columns your grid will have, but you want an 
element to stop at the last column. To do this, you can use -1 for the end column. */
.hero {
  grid-column: 1 / -1;
  position: relative;
}

/* Your .text element is not a CSS Grid, but you can create columns within an element without using 
Grid by using the column-width property. */
.text {
  grid-column: 2 / 3;
  font-size: 1.8rem;
  letter-spacing: 0.6px;
  column-width: 25rem;
  text-align: justify;
}

.hero-title {
  text-align: center;
  color: orangered;
  font-size: 8rem;
}

.hero-subtitle {
  font-size: 2.4rem;
  color: orangered;
  text-align: center;
}

.author {
  font-size: 2rem;
  font-family: "Raleway", sans-serif;
}
.author-name a:hover {
  background-color: #306203;
}

.publish-date {
  color: rgba(255, 255, 255, 0.5);
}

/* If you wanted to add more social icons, but keep them on the same row, you would need to update 
grid-template-columns to create additional columns. As an alternative, you can use the grid-auto-flow 
property */

/* This property takes either row or column as the first value, with an optional second value of dense. 
grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. Setting it to column will tell 
the algorithm to create new columns for content as needed */

/* The dense value allows the algorithm to backtrack and fill holes in the grid with smaller items, which
can result in items appearing out of order*/
.social-icons {
  display: grid;
  font-size: 3rem;
  grid-template-columns: repeat(5, 1fr);
  grid-auto-flow: column;
  grid-auto-columns: 1fr;
  align-items: center;
}

/* The ::first-letter pseudo-selector allows you to target the first letter in the text content of an 
element. */
.first-paragraph::first-letter {
  font-size: 6rem;
  color: orangered;
  float: left;
  margin-right: 1rem;
}

.quote {
  color: #00beef;
  font-size: 2.4rem;
  text-align: center;
  font-family: Raleway, sans-serif;
}

.quote::before {
  content: '" ';
}

.quote::after {
  content: ' "';
}

/* Note that it has the text and text-with-images values for the class attribute, which means it is 
already inheriting the styles from your .text rule. */

/* inherited rules from .text */
.text-with-images {
  display: grid;
  grid-template-columns: 1fr 2fr;
  column-gap: 3rem;
  margin-bottom: 3rem;
}

/* The gap property is a shorthand way to set the value of column-gap and row-gap at the same time. 
If given one value, it sets the column-gap and row-gap both to that value. If given two values, it sets the 
row-gap to the first value and the column-gap to the second. */

/* The place-items property can be used to set the align-items and justify-items values at the same 
time. The place-items property takes one or two values. */

/* If one value is provided, it is used for both the align-items and justify-items properties. If two values 
are provided, the first value is used for the align-items property and the second value is used for the 
justify-items property. */
.image-wrapper {
  display: grid;
  grid-template-columns: 2fr 1fr;
  grid-template-rows: repeat(3, min-content);
  gap: 2rem;
  place-items: center;
}

.image-1,
.image-3 {
  grid-column: 1/-1;
}
